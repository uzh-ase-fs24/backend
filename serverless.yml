service: findme-microservices

frameworkVersion: "3"

custom:
  localstack:
    stages:
      - local
      - local-no-mount
      - dev
    host: ${self:custom.stage.${opt:stage}.host}
    edgePort: 4566
    autoStart: true
    lambda:
      mountCode: ${self:custom.stage.${opt:stage}.mountCode}
  pythonRequirements:
    dockerizePip: non-linux
  stage:
    dev:
      host: http://localstack-main
      mountCode: false
      frontendOrigin: http://localhost:8100
      auth0Domain: findme-dev.eu.auth0.com
      auth0Audience: https://findme-dev.eu.auth0.com/api/v2/

    local:
      host: http://localhost
      mountCode: true
      frontendOrigin: http://localhost:8100
      auth0Domain: findme-dev.eu.auth0.com
      auth0Audience: https://findme-dev.eu.auth0.com/api/v2/

    local-no-mount:
      host: http://localhost
      mountCode: false
      frontendOrigin: http://localhost:8100
      auth0Domain: findme-dev.eu.auth0.com
      auth0Audience: https://findme-dev.eu.auth0.com/api/v2/

package:
  individually: true

provider:
  name: aws
  runtime: python3.12
  region: eu-central-2
  apiGateway:
    restApiId:
      "Fn::ImportValue": findmeApiGateway-restApiId
    restApiRootResourceId:
      "Fn::ImportValue": findmeApiGateway-rootResourceId

functions:
  findme-users:
    handler: handler.lambda_handler
    timeout: 30
    module: findme-users
    environment:
      FRONTEND_ORIGIN: ${self:custom.stage.${opt:stage}.frontendOrigin}
      AUTH0_DOMAIN: ${self:custom.stage.${opt:stage}.auth0Domain}
      AUTH0_AUDIENCE: ${self:custom.stage.${opt:stage}.auth0Audience}
    events:
      - http:
          path: /users/{id}
          method: get
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /users
          method: get
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
      - http:
          path: /users
          method: post
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
      - http:
          path: /users
          method: put
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
  findme-location-riddles:
    handler: handler.lambda_handler
    module: findme-location-riddles
    environment:
      FRONTEND_ORIGIN: ${self:custom.stage.${opt:stage}.frontendOrigin}
      AUTH0_DOMAIN: ${self:custom.stage.${opt:stage}.auth0Domain}
      AUTH0_AUDIENCE: ${self:custom.stage.${opt:stage}.auth0Audience}
    events:
      - http:
          path: /location-riddles
          method: post
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
      - http:
          path: /location-riddles
          method: get
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}

resources: # CloudFormation template syntax from here on.
  extensions: ${file(./sls-config-${opt:stage}.yml), null}
  Resources:
    imageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: imageUploadBucket
        AccessControl: PublicRead
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-python-requirements
  - serverless-localstack
