service: findme-microservices

frameworkVersion: "3"

custom:
  localstack:
    stages:
      - local
      - local-no-mount
      - dev
    host: ${self:custom.stage.${opt:stage}.host}
    edgePort: 4566
    autoStart: true
    lambda:
      mountCode: ${self:custom.stage.${opt:stage}.mountCode}
  pythonRequirements:
    dockerizePip: non-linux
  stage:
    dev:
      host: http://localstack-main
      mountCode: false
      frontendOrigin: http://localhost:8100
      auth0Domain: findme-dev.eu.auth0.com
      auth0Audience: https://findme-dev.eu.auth0.com/api/v2/

    local:
      host: http://localhost
      mountCode: true
      frontendOrigin: http://localhost:8100
      auth0Domain: findme-dev.eu.auth0.com
      auth0Audience: https://findme-dev.eu.auth0.com/api/v2/

    local-no-mount:
      host: http://localhost
      mountCode: false
      frontendOrigin: http://localhost:8100
      auth0Domain: findme-dev.eu.auth0.com
      auth0Audience: https://findme-dev.eu.auth0.com/api/v2/

package:
  individually: true
  patterns:
    - '!**/.venv/**'
    - '!**/node_modules/**'
    - '!**/tests/**'
    - '!**/.serverless/**'
    - '!**/*.md'
    - '!**/requirements.txt'
    - '!**/package*.json'

provider:
  name: aws
  runtime: python3.12
  region: eu-central-2
  apiGateway:
    restApiId:
      "Fn::ImportValue": findmeApiGateway-restApiId
    restApiRootResourceId:
      "Fn::ImportValue": findmeApiGateway-rootResourceId

functions:
  findme-users:
    handler: handler.lambda_handler
    name: findme-users-${opt:stage}
    timeout: 30
    module: findme-users
    environment:
      FRONTEND_ORIGIN: ${self:custom.stage.${opt:stage}.frontendOrigin}
      AUTH0_DOMAIN: ${self:custom.stage.${opt:stage}.auth0Domain}
      AUTH0_AUDIENCE: ${self:custom.stage.${opt:stage, 'dev'}.auth0Audience}
    events:
      - http:
          path: /users/swagger
          method: get
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
      - http:
          path: /users/{username}
          method: get
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
          request:
            parameters:
              paths:
                username: true
      - http:
          path: /users
          method: get
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
      - http:
          path: /users
          method: post
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
      - http:
          path: /users/score
          method: post
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
      - http:
          path: /users
          method: put
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
      - http:
          path: /users/search
          method: get
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
          request:
            parameters:
              querystrings:
                username: true
                type: false
      - http:
          path: /users/{username}/follow
          method: put
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
          request:
            parameters:
              paths:
                username: true
      - http:
          path: /users/{username}/follow
          method: patch
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
          request:
            parameters:
              paths:
                username: true
              querystrings:
                action: true
                type: false
      - http:
          path: /users/{username}/follow
          method: get
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
          request:
            parameters:
              paths:
                username: true
      - http:
          path: /users/follow
          method: get
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}

  findme-location-riddles:
    handler: handler.lambda_handler
    module: findme-location-riddles
    name: findme-location-riddles-${opt:stage}
    timeout: 30
    environment:
      FRONTEND_ORIGIN: ${self:custom.stage.${opt:stage}.frontendOrigin}
      AUTH0_DOMAIN: ${self:custom.stage.${opt:stage}.auth0Domain}
      AUTH0_AUDIENCE: ${self:custom.stage.${opt:stage, 'local'}.auth0Audience}
      USER_FUNCTION_NAME: findme-users-${opt:stage}
    events:
      - http:
          path: /location-riddles/swagger
          method: get
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
      - http:
          path: /location-riddles
          method: post
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
      - http:
          path: /location-riddles/{location_riddle_id}/guess
          method: post
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /location-riddles/{location_riddle_id}/comment
          method: post
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /location-riddles
          method: get
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
      - http:
          path: /location-riddles/{location_riddle_id}
          method: get
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /location-riddles/user/{username}
          method: get
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /location-riddles/user
          method: get
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
      - http:
          path: /location-riddles/{location_riddle_id}/rate
          method: post
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
      - http:
          path: /location-riddles/{location_riddle_id}
          method: delete
          cors:
            origin: ${self:custom.stage.${opt:stage}.frontendOrigin}
          request:
            parameters:
              paths:
                id: true

resources:
  extensions: ${file(./sls-config-${opt:stage}.yml), null}
  Resources:

    ase-findme-image-upload-bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ase-findme-image-upload-bucket
        AccessControl: PublicRead

    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: partition_key
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: partition_key
            KeyType: HASH
          - AttributeName: username
            KeyType: RANGE

    FollowerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: FollowerTable
        AttributeDefinitions:
          - AttributeName: partition_key # REQUEST / FOLLOWERS / FOLLOWING
            AttributeType: S
          - AttributeName: sort_key # USERNAME
            AttributeType: S
          - AttributeName: requestee
            AttributeType: S
          - AttributeName: requester
            AttributeType: S
        KeySchema:
          - AttributeName: partition_key
            KeyType: HASH
          - AttributeName: sort_key
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: RequesterIndex
            KeySchema:
              - AttributeName: requester
                KeyType: HASH
              - AttributeName: partition_key
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: RequesteeIndex
            KeySchema:
              - AttributeName: requestee
                KeyType: HASH
              - AttributeName: partition_key
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    locationRiddleTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: locationRiddleTable
        AttributeDefinitions:
          - AttributeName: location_riddle_id
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: location_riddle_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL

plugins:
  - serverless-python-requirements
  - serverless-localstack
